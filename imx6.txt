#######################################################################
# hexdump -C /sys/firmware/devicetree/base/memory/reg

early_init_dt_scan_nodes
early_init_dt_scan_memory

request_bus_freq(BUS_FREQ_HIGH);

FSLSSI_I2S_FORMATS
fsl_ssi_dai_template
snd_soc_dai_set_sysclk

printk(KERN_ERR "aic3x_hw_params: %d\n", params_width(params));

mxsfb_wait_for_vsync
wait4vsync
MXCFB_WAIT_FOR_VSYNC
mxcfb_pan_display

$ lsb_release -a

#######################################################################
*.h *.c *.cxx *.S *.mk *onfig *akefile
*.mk *onfig *akefile
*.h *.c *.S
*.dts *.dtsi

#######################################################################
https://www.nxp.com/support/developer-resources/hardware-development-tools/sabre-development-system/sabre-for-automotive-infotainment-based-on-the-i.mx-6-series:RDIMX6SABREAUTO?tab=Design_Tools_Tab
https://www.nxp.com/docs/en/user-guide/IMX6SABREINFOQSG.pdf

https://www.yoctoproject.org/docs/current/ref-manual/ref-manual.html#detailed-supported-distros

#######################################################################
$ docker commit -m "add user" -a "execunix" imx6hdd1 bionic.yocto
$ docker run -d -it --name imx6hdd1 -v /mnt:/mnt ubuntu:bionic
$ docker run -d -it --name imx6hdd1 -v /mnt:/mnt bionic.yocto
$ docker run -d -it --user execunix --name imx6hdd1 -v /mnt:/mnt bionic.yocto
$ find /mnt/hdd1 -user root -exec chown execunix:execunix {} \;

$ apt-get update
$ apt-get install vim nano
$ vi /etc/apt/sources.list
$ apt-get update
$ apt-get build-dep qemu
$ apt-get remove oss4-dev
$ apt-get install gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat cpio python python3 python3-pip python3-pexpect xz-utils debianutils iputils-ping python3-git python3-jinja2 libegl1-mesa libsdl1.2-dev pylint3 xterm rsync curl
x$ apt-get install python3-subunit mesa-common-dev zstd liblz4-tool
$ apt-get install make xsltproc docbook-utils fop dblatex xmlto
$ apt-get install dialog locales
$ dpkg-reconfigure locales
< 158:en_US.UTF-8, 3:UTF-8 >
$ update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
$ export LANG=en_US.UTF-8
http://downloads.yoctoproject.org/releases/yocto/yocto-3.0.1/buildtools/
$ sh ~/Downloads/x86_64-buildtools-nativesdk-standalone-3.0.1.sh
$ . /opt/poky/3.0.1/environment-setup-x86_64-pokysdk-linux
$ source oe-init-build-env
$ source oe-init-build-env ~/mybuilds
$ bitbake buildtools-tarball

#######################################################################
$ cd imx-yocto-bsp/sources/poky
$ . oe-init-build-env
$ bitbake buildtools-tarball
$ cd tmp/deploy/sdk
$ ./x86_64-buildtools-nativesdk-standalone-2.4.2.sh
$ . /opt/poky/2.5.2/environment-setup-x86_64-pokysdk-linux
$ export GIT_SSL_NO_VERIFY=0
$ git config --global user.name "execunix"
$ git config --global user.email "execunix@gmail.com"
$ git config --global http.sslVerify false
$ git config --global https.sslVerify false

#######################################################################
# export FB_MULTI_BUFFER=4
# echo 0 > /sys/class/graphics/fb1/blank
# echo -e "\033[9;0]" > /dev/tty1

> setenv mmcargs 'setenv bootargs console=${console},${baudrate} ${smp} root=${mmcroot} video=mxcfb0:dev=ldb,if=RGB24'
> setenv bootdelay 0
> saveenv

#######################################################################
$ mkdir ~/bin
$ curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
$ chmod a+x ~/bin/repo
$ PATH=${PATH}:~/bin

#######################################################################
# https://github.com/nxp-imx/imx-manifest/blob/imx-linux-sumo/README
# To download the 4.14.98-2.0.0 GA release
$ mkdir imx-yocto-bsp
$ cd imx-yocto-bsp
$ repo init -u https://github.com/nxp-imx/imx-manifest -b imx-linux-sumo -m imx-4.14.98-2.0.0_ga.xml
$ repo sync -j8

sysctl -n fs.inotify.max_user_watches
8192
sudo sysctl -n -w fs.inotify.max_user_watches=524288

docker start bionic.yocto.mnt
docker attach bionic.yocto.mnt
su execunix
docker exec -it bionic.yocto.mnt /bin/bash

# [MACHINE=<machine>] [DISTRO=fsl-imx-<backend>] source ./fsl-setup-release.sh -b bld-<backend>
====
$ DISTRO=fsl-imx-fb MACHINE=imx6qsabreauto source fsl-setup-release.sh -b build-fb
$ DISTRO=fsl-imx-xwayland MACHINE=imx6qsabreauto source fsl-setup-release.sh -b build-xwayland
$ bitbake core-image-minimal
$ bitbake core-image-minimal -c populate_sdk
$ bitbake fsl-image-multimedia-full
$ bitbake fsl-image-multimedia-full -c populate_sdk
$ bitbake fsl-image-gui
$ bitbake fsl-image-gui -c populate_sdk

#

$ bitbake fsl-image-mfgtool-initramfs

$ bitbake linux-mfgtool
$ bitbake u-boot-mfgtool
$ bitbake u-boot-imx-mfgtool
$ bitbake -c cleanall linux-mfgtool
$ bitbake linux-imx -c compile -f
$ bitbake linux-imx -c deploy
$ cp tmp/deploy/images/uImage /media/Boot

$ source setup-environment build-xwayland
$ echo "UBOOT_CONFIG = \"emmc\"" >> conf/local.conf
$ MACHINE=imx6qsabreauto bitbake -c deploy u-boot-imx
$ MACHINE=imx6qsabreauto bitbake u-boot-imx
$ MACHINE=imx6qsabreauto bitbake linux-imx

./tmp/work-shared/imx6qsabreauto/kernel-source
./tmp/work/imx6qsabreauto-poky-linux-gnueabi/linux-imx/5.10.72+gitAUTOINC+a68e31b63f-r0/git
./tmp/work/imx6qsabreauto-poky-linux-gnueabi/u-boot-imx/2021.04-r0/git

#######################################################################
$ . /opt/fsl-imx-xwayland/4.14-sumo/environment-setup-cortexa9hf-neon-poky-linux-gnueabi
$ export ARCH=arm

$ cd /mnt/work/mx6/mx6-41498
$ . envsetup.sh
$ cd uboot-imx
$ make distclean
$ make mx6qsabreauto_defconfig
$ make mx6es1mfg_defconfig
$ make mx6es1_defconfig
$ make -j8 u-boot.imx
$ make distclean
$ cd linux-imx
$ make imx_v7_defconfig
$ make -j8
$ make distclean
$ make imx6es1mfg_defconfig
$ make -j8
$ cp -v arch/arm/boot/zImage arch/arm/boot/zImage-mfg
$ make imx6es1_defconfig
$ make -j8

$ cd /mnt/work/mx6/mx6-51072

$ git clone https://github.com/nxp-imx/uboot-imx
$ cd uboot-imx
$ git switch lf_v2021.04
$ make clean
x$ make mx6qsabreauto_defconfig
$ make mx6es1mfg_defconfig
$ make -j8 u-boot.imx
$ make mx6es1_defconfig
$ make -j8 u-boot.imx

$ git clone https://github.com/nxp-imx/linux-imx
$ cd linux-imx
$ git switch lf-5.10.y
$ make clean
x$ make imx_v7_defconfig
$ make imx6es1mfg_defconfig
$ make -j8
$ cp -v arch/arm/boot/zImage arch/arm/boot/zImage-mfg
$ make mx6es1_defconfig
$ make -j8

#######################################################################
M1:	Milestone 1
RC:	Release Candidate
GA:	General Availability
DFU:	Device Firmware Upgrade
TEE:	Trusted Excusion Environment

#######################################################################
$ su
# tar cvpjf ../rootfs.tar.bz2 .

$ dd if=initramfs.cpio.gz.u-boot of=initramfs.cpio.gz bs=64 skip=1
$ gunzip initramfs.cpio.gz
# cpio -i < ../initramfs.cpio

$ find . | cpio -H newc -o | gzip > ../newrootfs.cpio.gz
$ mkimage -A arm -O linux -T ramdisk -n "Initial Ram Disk" -d ../newrootfs.cpio.gz ../newrootfs.cpio.gz.u-boot

#######################################################################
sudo apt-get update

sudo apt-get install -y -q --no-install-recommends -o Dpkg::Options::="--force-confdef" \
-o Dpkg::Options::="--force-confold" build-essential chrpath cpio diffstat file  \
g++-multilib gawk gcc-multilib git-core locales openssh-client python python3 \
socat sudo texinfo tmux unzip wget

sudo rm -rf /var/lib/apt/lists/*

sudo locale-gen en_US.UTF-8

export LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

